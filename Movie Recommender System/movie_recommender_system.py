# -*- coding: utf-8 -*-
"""Movie Recommender system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gNRyV_lZvtSiW2xO_I39Qbaxw0I97DlZ
"""

import numpy as np
import pandas as pd

movies = pd.read_csv('tmdb_5000_movies.csv')
credits = pd.read_csv('tmdb_5000_credits.csv')

movies.head()

credits.head(5)

credits['cast'][0]

movies = movies.merge(credits, on='title')

movies.shape

movies.head(1)

import matplotlib.pyplot as p
values = []
for i in movies['original_language'].value_counts().keys():
    values.append(movies['original_language'].value_counts()[i])
x_coor = [i for i in range(1, len(values)+1)]
keys = list(movies['original_language'].value_counts().keys())

p.subplots(figsize=(20,5))
p.bar(x_coor, values, tick_label = keys, width=0.8)
p.show()

movies.info()
# thinking of cols which one to consider in dataset in building model
# genres
# id
# keywords
# title
# overview
# cast
# crew

movies = movies[['movie_id','title','overview','genres', 'keywords','cast','crew']]
movies.head()

# Missing Rows
# There are 3 rows whose overview is not known
movies.isnull().sum()

movies.dropna(inplace=True)

# Duplicated Rows
# There are no duplicated rows
movies.duplicated().sum()

# Making genre, keywords, cast, crew in good form to process
movies.iloc[0].genres
# '[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]'
# Above form to ['Acion', 'Adventure','Fantasy','Science Fiction']

import ast
def convert(obj):
    l = []
    for i in ast.literal_eval(obj):
        l.append(i['name'])
    return l

movies['genres'] = movies['genres'].apply(convert)

movies.head()

movies['keywords'] = movies['keywords'].apply(convert)

movies.head()

movies.iloc[0].cast

import ast
def convert_cast(obj):
    l = []
    c = 0
    for i in ast.literal_eval(obj):
        if c < 3:
            l.append(i['name'])
            c+=1
        else:
            break
    return l

movies['cast'] = movies['cast'].apply(convert_cast)

movies.head()

import ast
def fetch_director(obj):
    l = []
    for i in ast.literal_eval(obj):
        if i['job'] == 'Director':
            l.append(i['name'])
            break
    return l

movies['crew'] = movies['crew'].apply(fetch_director)
movies.head()

# overview is string and so converting it to list
movies['overview'] = movies['overview'].apply(lambda x: x.split()) 
movies.head()

movies['genres'] = movies['genres'].apply(lambda x: [i.replace(" ","") for i in x])
movies['keywords'] = movies['keywords'].apply(lambda x: [i.replace(" ","") for i in x])
movies['cast'] = movies['cast'].apply(lambda x: [i.replace(" ","") for i in x])
movies['crew'] = movies['crew'].apply(lambda x: [i.replace(" ","") for i in x])

movies = movies.drop(['oerview'], axis=1)

movies.head()

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

movies.head()

df = movies[['movie_id','title','tags']]

df['tags'] = df['tags'].apply(lambda x: " ".join(x))

df

df['tags'] = df['tags'].apply(lambda x: x.lower())

df

from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

def stem(text):
    y = []
    for i in text.split():
        y.append(ps.stem(i))
    return " ".join(y)

stem(df.iloc[0].tags)

df['tags'] = df['tags'].apply(stem)

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=6000, stop_words='english')
vectors = cv.fit_transform(df['tags']).toarray()

vectors.shape

cv.get_feature_names()

from sklearn.metrics.pairwise import cosine_similarity
similarity = cosine_similarity(vectors)

similarity[2]

def recommend(movie):
    movie_index = df[df['title'] == movie].index[0]
    distances = similarity[movie_index]
    movie_list = sorted(list(enumerate(distances)), reverse=True, key = lambda x:x[1])[1:6]
    
    for i in movie_list:
        print(df.iloc[i[0]].title)

recommend('Iron Man')

import pickle
pickle.dump(df.to_dict(), open('movies.pkl', 'wb'))

pickle.dump(similarity, open('similarity.pkl', 'wb'))

